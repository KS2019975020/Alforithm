문제 인식:
스택의 구조를 코드로 구현

문제 유형 파악:
method push, pop, size, empty, top을 만들어 각자의 역활을 수행할 수 있도록 함

알고리즘 나열:
1. 배열과 크기 변수를 전역 변수로 추가
2. ArrayStack method를 만듦, 스택 크기를 정의하는 method
3. push method를 만듦.
4. 스택이 가득 차이 않았을 경우 배열의 끝에 값을 추가하고 size 증가
5. pop method를 만듦.
6. 스택이 비어있는지 확인하고, 맨 위의 값을 반환
7. top method를 만듦.
8. 스택이 비어있는지 확인한 후 맨 위의 값을 반환
9. size method를 만듦.
10. 스택의 크기를 반환
11. empty method를 만듦
12. 스택이 비어있는지 확인, 비어있으면 1, 아니면 0을 반환
13. isEmpty method를 만듦
14. 스택이 비어있는지 확인.
15. Scanner 이용, 명령어 개수 입력
16. 스택 구현을 위해, 위에 만든 ArrayStack을 이용해 객체 생성
17. i = 0이고, i < 명령어 개수 만큼 반복, 반복할 때마다 i는 1씩 증가
18. String 타입의 변수 생성하고 Scanner로 명령어를 받음
19. if문 이용, 무슨 명령어가 들어왔는지 확인하고 그 명령어에 맞게 수행